buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

configurations {
    shade
    compile.extendsFrom shade
}
// configurations {
//     deployJars
// }


apply plugin: 'forge'

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


version = config.minecraft_version + "-" + config.mod_version
group= "com.syndaryl.minecraft."+config.mod_name // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name  // FOLDER YOUR MOD IS IN

minecraft {

    //srgExtra "PK:org/reflections com/syndaryl/minecraft/dumpentitylist/org/reflections"
    srgExtra "CL:org/reflections/* com/syndaryl/minecraft/dumpentitylist/org/reflections/*"

    //version = "1.7.10-10.13.0.1180"
    version = config.minecraft_version + "-" + config.forge_version // grab latest forge
    // assetDir = "eclipse/assets" // don't use this any more, since we're in a multiproject setup.
    // instead look somewhere sensible
    if (file('../run').exists()) {
        runDir = "../run/assets"
    }
    else
    {
        runDir = "assets"
    }
}

dependencies {
    //shade 'org.reflections:Reflections'
    shade files(
    	'reflections-0.9.11-SNAPSHOT.jar'
     )

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}
jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
